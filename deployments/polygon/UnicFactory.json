{
  "address": "0x287fAb9bf5F74d41B3627CE883f854fB289e388E",
  "abi": [
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_royalties",
          "type": "uint256"
        }
      ],
      "name": "ERC1155Deployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_royalties",
          "type": "uint256"
        }
      ],
      "name": "deployERC1155",
      "outputs": [
        {
          "internalType": "address",
          "name": "newERC1155",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x967ae05f46ecbc34885d2066cb2f62713d961c43c29921463cd6d14bfade3f3c",
  "receipt": {
    "to": null,
    "from": "0xa8f24a55dcE2826ced9851C02011256614d233c6",
    "contractAddress": "0x287fAb9bf5F74d41B3627CE883f854fB289e388E",
    "transactionIndex": 35,
    "gasUsed": "2912403",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000008000000000000000000000000000010000000000000000000000000000800001000000000000000100000000000000000000020000000000000000000800000000000000000080040000000000400040000000040000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000008000000000004000000040000000000001000000000000000000000000000000120000000220000000000000000000000080000000000000000000000000000000000000100000",
    "blockHash": "0xb61a1ce15b45e6af6486a4e6b8cbdedc90ae449c1f2ed248d7c0c3ec96f9d913",
    "transactionHash": "0x967ae05f46ecbc34885d2066cb2f62713d961c43c29921463cd6d14bfade3f3c",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 35271606,
        "transactionHash": "0x967ae05f46ecbc34885d2066cb2f62713d961c43c29921463cd6d14bfade3f3c",
        "address": "0x287fAb9bf5F74d41B3627CE883f854fB289e388E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a8f24a55dce2826ced9851c02011256614d233c6"
        ],
        "data": "0x",
        "logIndex": 139,
        "blockHash": "0xb61a1ce15b45e6af6486a4e6b8cbdedc90ae449c1f2ed248d7c0c3ec96f9d913"
      },
      {
        "transactionIndex": 35,
        "blockNumber": 35271606,
        "transactionHash": "0x967ae05f46ecbc34885d2066cb2f62713d961c43c29921463cd6d14bfade3f3c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a8f24a55dce2826ced9851c02011256614d233c6",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000333c88f0a87b0f8000000000000000000000000000000000000000000000000168e297caf47411a00000000000000000000000000000000000000000000519cde7296230ed46372000000000000000000000000000000000000000000000000135a60eda4bf902200000000000000000000000000000000000000000000519ce1a65eb2195c146a",
        "logIndex": 140,
        "blockHash": "0xb61a1ce15b45e6af6486a4e6b8cbdedc90ae449c1f2ed248d7c0c3ec96f9d913"
      }
    ],
    "blockNumber": 35271606,
    "cumulativeGasUsed": "8143822",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "3ed0637ec5513b737efa8b4532041950",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_royalties\",\"type\":\"uint256\"}],\"name\":\"ERC1155Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_royalties\",\"type\":\"uint256\"}],\"name\":\"deployERC1155\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newERC1155\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/UnicFactory.sol\":\"UnicFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/UnicERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../interfaces/IUnicERC1155.sol\\\";\\nimport \\\"../utils/ERC2981Base.sol\\\";\\n\\ncontract UnicERC1155 is IUnicERC1155, ERC1155, EIP712, ERC2981Base, Ownable, AccessControl {\\n    RoyaltyInfo private royalties;\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    string private constant SIGNING_DOMAIN = \\\"Unic-Voucher\\\";\\n    string private constant SIGNATURE_VERSION = \\\"1\\\";\\n\\n    mapping (address => uint256) pendingWithdrawals;\\n\\n    constructor(string memory _uri, uint _royalties, address _creator) ERC1155(_uri) EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION) {\\n        _setRoyalties(_creator, _royalties);\\n        _setupRole(MINTER_ROLE, _creator);\\n    }\\n\\n    /// @notice Retuns the amount of Ether available to the caller to withdraw.\\n    function availableToWithdraw() public view returns (uint256) {\\n        return pendingWithdrawals[msg.sender];\\n    }\\n\\n    function burn( address from, uint256 id, uint256 amount) public onlyOwner {\\n        if (msg.sender != from) revert NotOwner();\\n        _burn(from, id, amount);\\n    }\\n\\n    function mint( address to, uint256 id, uint256 amount) public onlyOwner {\\n        _mint(to, id, amount, \\\"\\\");\\n    }\\n\\n    /// @notice Redeems an NFTVoucher for an actual NFT, creating it in the process.\\n    /// @param redeemer The address of the account which will receive the NFT upon success.\\n    /// @param voucher A signed NFTVoucher that describes the NFT to be redeemed.\\n    function redeem(address redeemer, NFTVoucher calldata voucher) public payable returns (uint256) {\\n        // make sure signature is valid and get the address of the signer\\n        address signer = _verify(voucher);\\n\\n        // make sure that the signer is authorized to mint NFTs\\n        if (!hasRole(MINTER_ROLE, signer)) revert InvalidSignature();\\n\\n        // make sure that the redeemer is paying enough to cover the buyer's cost\\n        if (msg.value < voucher.minPrice) revert InsufficientFunds();\\n\\n        // first assign the token to the signer, to establish provenance on-chain\\n        _mint(signer, voucher.tokenId, voucher.amount, \\\"\\\");\\n\\n        // transfer the token to the redeemer\\n        _safeTransferFrom(signer, redeemer, voucher.tokenId, voucher.amount, \\\"\\\");\\n\\n        // record payment to signer's withdrawal balance\\n        pendingWithdrawals[signer] += msg.value;\\n\\n        return voucher.tokenId;\\n    }\\n\\n    function royaltyInfo(uint256, uint256 value)\\n        external\\n        view\\n        override(IERC2981Royalties)\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        RoyaltyInfo memory _royalties = royalties;\\n        receiver = _royalties.recipient;\\n        royaltyAmount = (value * _royalties.amount) / 10000;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, ERC2981Base, AccessControl) returns (bool) {\\n        return interfaceId == type(IUnicERC1155).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Transfers all pending withdrawal balance to the caller. Reverts if the caller is not an authorized minter.\\n    function withdraw() public onlyOwner {\\n        // IMPORTANT: casting msg.sender to a payable address is only safe if ALL members of the minter role are payable addresses.\\n        address payable receiver = payable(msg.sender);\\n\\n        uint amount = pendingWithdrawals[receiver];\\n        // zero account before transfer to prevent re-entrancy attack\\n        pendingWithdrawals[receiver] = 0;\\n        receiver.transfer(amount);\\n    }\\n\\n    /// @notice Returns a hash of the given NFTVoucher, prepared using EIP712 typed data hashing rules.\\n    /// @param voucher An NFTVoucher to hash.\\n    function _hash(NFTVoucher calldata voucher) internal view returns (bytes32) {\\n        return _hashTypedDataV4(keccak256(abi.encode(\\n            keccak256(\\\"NFTVoucher(uint256 tokenId,uint256 minPrice,uint256 amount)\\\"),\\n            voucher.tokenId,\\n            voucher.minPrice,\\n            voucher.amount\\n        )));\\n    }\\n\\n    // Value is in basis points so 10000 = 100% , 100 = 1% etc\\n    function _setRoyalties(address recipient, uint256 value) internal {\\n        if (value > 10000) revert RoyaltyTooHigh();\\n        royalties = RoyaltyInfo(recipient, uint24(value));\\n    }\\n\\n    /// @notice Verifies the signature for a given NFTVoucher, returning the address of the signer.\\n    /// @dev Will revert if the signature is invalid. Does not verify that the signer is authorized to mint NFTs.\\n    /// @param voucher An NFTVoucher describing an unminted NFT.\\n    function _verify(NFTVoucher calldata voucher) internal view returns (address) {\\n        bytes32 digest = _hash(voucher);\\n        return ECDSA.recover(digest, voucher.signature);\\n    }\\n}\",\"keccak256\":\"0x0eec8eb7f9b2376ec7a5409e90d128778b9936600ed70eee04cccb013a3593ca\",\"license\":\"MIT\"},\"src/contracts/UnicFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./UnicERC1155.sol\\\";\\nimport \\\"../interfaces/IUnicFactory.sol\\\";\\n\\ncontract UnicFactory is IUnicFactory, Ownable, Pausable {\\n    function deployERC1155(\\n        string memory _uri,\\n        uint _royalties\\n    ) external override whenNotPaused returns (address newERC1155) {\\n        newERC1155 = address(new UnicERC1155(_uri, _royalties, msg.sender));\\n        Ownable(newERC1155).transferOwnership(msg.sender);\\n        emit ERC1155Deployed(newERC1155, msg.sender, _uri, _royalties);\\n    }\\n}\",\"keccak256\":\"0xbe270bc8f517a5dbeed0c842ca6a3a5239352378037affa9140db293123d921e\",\"license\":\"MIT\"},\"src/interfaces/IERC2981Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC2981Royalties {\\n    function royaltyInfo(uint256 _tokenId, uint256 _value) external view returns (address _receiver, uint256 _royaltyAmount);\\n}\",\"keccak256\":\"0xb60390a9c0004a860deee3c6d38f66be6b63ee600f9d01ea0a0f063d9add5a6f\",\"license\":\"MIT\"},\"src/interfaces/IUnicERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IUnicERC1155 {\\n    /// @notice Represents an un-minted NFT, which has not yet been recorded into the blockchain. A signed voucher can be redeemed for a real NFT using the redeem function.\\n    struct NFTVoucher {\\n        /// @notice The id of the token to be redeemed. Must be unique - if another token with this ID already exists, the redeem function will revert.\\n        uint256 tokenId;\\n\\n        /// @notice The minimum price (in wei) that the NFT creator is willing to accept for the initial sale of this NFT.\\n        uint256 minPrice;\\n\\n        /// @notice Amount of token minted\\n        uint256 amount;\\n\\n        /// @notice the EIP-712 signature of all other fields in the NFTVoucher struct. For a voucher to be valid, it must be signed by an account with the MINTER_ROLE.\\n        bytes signature;\\n    }\\n\\n    function availableToWithdraw() external view returns (uint256);\\n\\n    function burn( address from, uint256 id, uint256 amount) external;\\n\\n    function mint( address to, uint256 id, uint256 amount) external;\\n\\n    function redeem(address redeemer, NFTVoucher calldata voucher) external payable returns (uint256);\\n\\n    function withdraw() external;\\n\\n    error NotOwner();\\n\\n    error InvalidSignature();\\n\\n    error InsufficientFunds();\\n\\n    error RoyaltyTooHigh();\\n}\",\"keccak256\":\"0x22112ad835afa00aaee3f21e63312cfa0e3876df635b831c2c5ed6f0c9a9525c\",\"license\":\"MIT\"},\"src/interfaces/IUnicFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUnicFactory {\\n    function deployERC1155(\\n        string memory _uri,\\n        uint256 _royalties\\n    ) external returns (address newERC1155);\\n\\n    event ERC1155Deployed(\\n        address _contract,\\n        address _creator,\\n        string _uri,\\n        uint256 _royalties\\n    );\\n\\n    error ZeroAddress();\\n}\",\"keccak256\":\"0x40d9bfc07b6c00fd350ccb59894b95c1eac4c25ac7ed0344590418e2cc2cc62e\",\"license\":\"MIT\"},\"src/utils/ERC2981Base.sol\":{\"content\":\"pragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../interfaces/IERC2981Royalties.sol\\\";\\n\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\nabstract contract ERC2981Base is ERC165, IERC2981Royalties {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint24 amount;\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC2981Royalties).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\",\"keccak256\":\"0x4091da83d3ca5fec4d09f1ac35a7f630ea3f4521de5e31d0cd075f02480f472f\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361002c565b6000805460ff60a01b1916905561007c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6133538061008b6000396000f3fe60806040523480156200001157600080fd5b50600436106200005e5760003560e01c80635c975abb1462000063578063715018a6146200008557806380aa201514620000915780638da5cb5b14620000c1578063f2fde38b14620000d3575b600080fd5b600054600160a01b900460ff1660405190151581526020015b60405180910390f35b6200008f620000ea565b005b620000a8620000a236600462000390565b62000102565b6040516001600160a01b0390911681526020016200007c565b6000546001600160a01b0316620000a8565b6200008f620000e43660046200044f565b620001ee565b620000f462000271565b620001006000620002cd565b565b60006200010e6200031d565b8282336040516200011f906200036c565b6200012d93929190620004d1565b604051809103906000f0801580156200014a573d6000803e3d6000fd5b5060405163f2fde38b60e01b81523360048201529091506001600160a01b0382169063f2fde38b90602401600060405180830381600087803b1580156200019057600080fd5b505af1158015620001a5573d6000803e3d6000fd5b505050507f51af02bd4bf0f605d8c1576d387be351956a5b12769a24b4a5b9b1cdacbc66f581338585604051620001e0949392919062000506565b60405180910390a192915050565b620001f862000271565b6001600160a01b038116620002635760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200026e81620002cd565b50565b6000546001600160a01b03163314620001005760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200025a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff1615620001005760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016200025a565b612dd8806200054683390190565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215620003a457600080fd5b823567ffffffffffffffff80821115620003bd57600080fd5b818501915085601f830112620003d257600080fd5b813581811115620003e757620003e76200037a565b604051601f8201601f19908116603f011681019083821181831017156200041257620004126200037a565b816040528281528860208487010111156200042c57600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b6000602082840312156200046257600080fd5b81356001600160a01b03811681146200047a57600080fd5b9392505050565b6000815180845260005b81811015620004a9576020818501810151868301820152016200048b565b81811115620004bc576000602083870101525b50601f01601f19169290920160200192915050565b606081526000620004e6606083018662000481565b6020830194909452506001600160a01b0391909116604090910152919050565b6001600160a01b03858116825284166020820152608060408201819052600090620005349083018562000481565b90508260608301529594505050505056fe6101406040523480156200001257600080fd5b5060405162002dd838038062002dd88339810160408190526200003591620003c1565b6040518060400160405280600c81526020016b2ab734b196ab37bab1b432b960a11b815250604051806040016040528060018152602001603160f81b8152508462000086816200016260201b60201c565b50815160209283012081519183019190912060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818801819052818301969096526060810194909452608080850193909352308483018190528151808603909301835260c0948501909152815191909501209052919091526101205262000121336200017b565b6200012d8183620001cd565b620001597f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6826200023b565b505050620004f8565b805162000177906002906020840190620002e8565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612710811115620001f15760405163c2b03beb60e01b815260040160405180910390fd5b604080518082019091526001600160a01b0390921680835262ffffff909116602090920182905260058054600160a01b9093026001600160b81b0319909316909117919091179055565b60008281526004602090815260408083206001600160a01b038516845290915290205462000177908390839060ff16620001775760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002a43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b828054620002f690620004bc565b90600052602060002090601f0160209004810192826200031a576000855562000365565b82601f106200033557805160ff191683800117855562000365565b8280016001018555821562000365579182015b828111156200036557825182559160200191906001019062000348565b506200037392915062000377565b5090565b5b8082111562000373576000815560010162000378565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620003bc57600080fd5b919050565b600080600060608486031215620003d757600080fd5b83516001600160401b0380821115620003ef57600080fd5b818601915086601f8301126200040457600080fd5b8151818111156200041957620004196200038e565b604051601f8201601f19908116603f011681019083821181831017156200044457620004446200038e565b816040528281526020935089848487010111156200046157600080fd5b600091505b8282101562000485578482018401518183018501529083019062000466565b82821115620004975760008484830101525b8097505050508086015193505050620004b360408501620003a4565b90509250925092565b600181811c90821680620004d157607f821691505b602082108103620004f257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051612890620005486000396000611c6301526000611cb201526000611c8d01526000611be601526000611c1001526000611c3a01526128906000f3fe60806040526004361061014a5760003560e01c8063715018a6116100b6578063d547741f1161006f578063d547741f146103eb578063e322ad2b1461040b578063e985e9c51461042d578063f242432a14610476578063f2fde38b14610496578063f5298aca146104b657600080fd5b8063715018a6146103255780638da5cb5b1461033a57806391d1485414610362578063a217fddf14610382578063a22cb46514610397578063d5391393146103b757600080fd5b80632eb2c2d6116101085780632eb2c2d6146102705780632f2ff15d1461029057806336568abe146102b05780633ccfd60b146102d05780634e1273f4146102e55780635acade481461031257600080fd5b8062fdd58e1461014f57806301ffc9a7146101825780630e89341c146101b2578063156e29f6146101df578063248a9ca3146102015780632a55205a14610231575b600080fd5b34801561015b57600080fd5b5061016f61016a366004611e45565b6104d6565b6040519081526020015b60405180910390f35b34801561018e57600080fd5b506101a261019d366004611e85565b61056c565b6040519015158152602001610179565b3480156101be57600080fd5b506101d26101cd366004611ea2565b610597565b6040516101799190611f17565b3480156101eb57600080fd5b506101ff6101fa366004611f2a565b61062b565b005b34801561020d57600080fd5b5061016f61021c366004611ea2565b60009081526004602052604090206001015490565b34801561023d57600080fd5b5061025161024c366004611f5d565b610653565b604080516001600160a01b039093168352602083019190915201610179565b34801561027c57600080fd5b506101ff61028b3660046120cb565b6106a8565b34801561029c57600080fd5b506101ff6102ab366004612175565b6106f4565b3480156102bc57600080fd5b506101ff6102cb366004612175565b610719565b3480156102dc57600080fd5b506101ff610797565b3480156102f157600080fd5b506103056103003660046121a1565b6107e2565b604051610179919061229d565b61016f6103203660046122b0565b61090c565b34801561033157600080fd5b506101ff610a03565b34801561034657600080fd5b506003546040516001600160a01b039091168152602001610179565b34801561036e57600080fd5b506101a261037d366004612175565b610a17565b34801561038e57600080fd5b5061016f600081565b3480156103a357600080fd5b506101ff6103b2366004612305565b610a42565b3480156103c357600080fd5b5061016f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156103f757600080fd5b506101ff610406366004612175565b610a4d565b34801561041757600080fd5b503360009081526006602052604090205461016f565b34801561043957600080fd5b506101a2610448366004612336565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561048257600080fd5b506101ff610491366004612360565b610a72565b3480156104a257600080fd5b506101ff6104b13660046123c5565b610ab7565b3480156104c257600080fd5b506101ff6104d1366004611f2a565b610b30565b60006001600160a01b0383166105465760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216631958019560e21b1480610591575061059182610b6c565b92915050565b6060600280546105a6906123e0565b80601f01602080910402602001604051908101604052809291908181526020018280546105d2906123e0565b801561061f5780601f106105f45761010080835404028352916020019161061f565b820191906000526020600020905b81548152906001019060200180831161060257829003601f168201915b50505050509050919050565b610633610b91565b61064e83838360405180602001604052806000815250610beb565b505050565b604080518082019091526005546001600160a01b038116808352600160a01b90910462ffffff16602083018190529091600091612710906106949086612430565b61069e919061244f565b9150509250929050565b6001600160a01b0385163314806106c457506106c48533610448565b6106e05760405162461bcd60e51b815260040161053d90612471565b6106ed8585858585610cff565b5050505050565b60008281526004602052604090206001015461070f81610edc565b61064e8383610ee6565b6001600160a01b03811633146107895760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161053d565b6107938282610f6c565b5050565b61079f610b91565b3360008181526006602052604080822080549083905590519091839183156108fc0291849190818181858888f1935050505015801561064e573d6000803e3d6000fd5b606081518351146108475760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161053d565b6000835167ffffffffffffffff81111561086357610863611f7f565b60405190808252806020026020018201604052801561088c578160200160208202803683370190505b50905060005b8451811015610904576108d78582815181106108b0576108b06124c0565b60200260200101518583815181106108ca576108ca6124c0565b60200260200101516104d6565b8282815181106108e9576108e96124c0565b60209081029190910101526108fd816124d6565b9050610892565b509392505050565b60008061091883610fd3565b90506109447f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a682610a17565b61096157604051638baa579f60e01b815260040160405180910390fd5b82602001353410156109865760405163356680b760e01b815260040160405180910390fd5b6109a9818460000135856040013560405180602001604052806000815250610beb565b6109cd81858560000135866040013560405180602001604052806000815250611033565b6001600160a01b038116600090815260066020526040812080543492906109f59084906124ef565b909155505091359392505050565b610a0b610b91565b610a15600061115d565b565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6107933383836111af565b600082815260046020526040902060010154610a6881610edc565b61064e8383610f6c565b6001600160a01b038516331480610a8e5750610a8e8533610448565b610aaa5760405162461bcd60e51b815260040161053d90612471565b6106ed8585858585611033565b610abf610b91565b6001600160a01b038116610b245760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161053d565b610b2d8161115d565b50565b610b38610b91565b336001600160a01b03841614610b61576040516330cd747160e01b815260040160405180910390fd5b61064e83838361128f565b60006001600160e01b03198216637965db0b60e01b148061059157506105918261140b565b6003546001600160a01b03163314610a155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161053d565b6001600160a01b038416610c4b5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161053d565b336000610c5785611430565b90506000610c6485611430565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290610c969084906124ef565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610cf68360008989898961147b565b50505050505050565b8151835114610d615760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161053d565b6001600160a01b038416610d875760405162461bcd60e51b815260040161053d90612507565b3360005b8451811015610e6e576000858281518110610da857610da86124c0565b602002602001015190506000858381518110610dc657610dc66124c0565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610e165760405162461bcd60e51b815260040161053d9061254c565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610e539084906124ef565b9250508190555050505080610e67906124d6565b9050610d8b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610ebe929190612596565b60405180910390a4610ed48187878787876115d6565b505050505050565b610b2d8133611691565b610ef08282610a17565b6107935760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610f283390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610f768282610a17565b156107935760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080610fdf836116f5565b905061102c81610ff260608601866125c4565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061175f92505050565b9392505050565b6001600160a01b0384166110595760405162461bcd60e51b815260040161053d90612507565b33600061106585611430565b9050600061107285611430565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156110b55760405162461bcd60e51b815260040161053d9061254c565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906110f29084906124ef565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611152848a8a8a8a8a61147b565b505050505050505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036112225760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161053d565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166112f15760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161053d565b3360006112fd84611430565b9050600061130a84611430565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156113935760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161053d565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052610cf6565b60006001600160e01b0319821663152a902d60e11b148061059157506105918261177b565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061146a5761146a6124c0565b602090810291909101015292915050565b6001600160a01b0384163b15610ed45760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906114bf908990899088908890889060040161260b565b6020604051808303816000875af19250505080156114fa575060408051601f3d908101601f191682019092526114f791810190612650565b60015b6115a65761150661266d565b806308c379a00361153f575061151a612688565b806115255750611541565b8060405162461bcd60e51b815260040161053d9190611f17565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161053d565b6001600160e01b0319811663f23a6e6160e01b14610cf65760405162461bcd60e51b815260040161053d90612712565b6001600160a01b0384163b15610ed45760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061161a908990899088908890889060040161275a565b6020604051808303816000875af1925050508015611655575060408051601f3d908101601f1916820190925261165291810190612650565b60015b6116615761150661266d565b6001600160e01b0319811663bc197c8160e01b14610cf65760405162461bcd60e51b815260040161053d90612712565b61169b8282610a17565b610793576116b3816001600160a01b031660146117cb565b6116be8360206117cb565b6040516020016116cf9291906127b8565b60408051601f198184030181529082905262461bcd60e51b825261053d91600401611f17565b604080517f273296f6b8425ecf436e74c1375a9a709300fa15a853da3f7c10240376f93de860208281019190915283358284015283013560608201529082013560808201526000906105919060a00160405160208183030381529060405280519060200120611967565b600080600061176e85856119b5565b9150915061090481611a23565b60006001600160e01b03198216636cdb3d1360e11b14806117ac57506001600160e01b031982166303a24d0760e21b145b8061059157506301ffc9a760e01b6001600160e01b0319831614610591565b606060006117da836002612430565b6117e59060026124ef565b67ffffffffffffffff8111156117fd576117fd611f7f565b6040519080825280601f01601f191660200182016040528015611827576020820181803683370190505b509050600360fc1b81600081518110611842576118426124c0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611871576118716124c0565b60200101906001600160f81b031916908160001a9053506000611895846002612430565b6118a09060016124ef565b90505b6001811115611918576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106118d4576118d46124c0565b1a60f81b8282815181106118ea576118ea6124c0565b60200101906001600160f81b031916908160001a90535060049490941c936119118161282d565b90506118a3565b50831561102c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161053d565b6000610591611974611bd9565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008082516041036119eb5760208301516040840151606085015160001a6119df87828585611d03565b94509450505050611a1c565b8251604003611a145760208301516040840151611a09868383611df0565b935093505050611a1c565b506000905060025b9250929050565b6000816004811115611a3757611a37612844565b03611a3f5750565b6001816004811115611a5357611a53612844565b03611aa05760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161053d565b6002816004811115611ab457611ab4612844565b03611b015760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161053d565b6003816004811115611b1557611b15612844565b03611b6d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161053d565b6004816004811115611b8157611b81612844565b03610b2d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161053d565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611c3257507f000000000000000000000000000000000000000000000000000000000000000046145b15611c5c57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b90565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611d3a5750600090506003611de7565b8460ff16601b14158015611d5257508460ff16601c14155b15611d635750600090506004611de7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611db7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611de057600060019250925050611de7565b9150600090505b94509492505050565b6000806001600160ff1b03831681611e0d60ff86901c601b6124ef565b9050611e1b87828885611d03565b935093505050935093915050565b80356001600160a01b0381168114611e4057600080fd5b919050565b60008060408385031215611e5857600080fd5b611e6183611e29565b946020939093013593505050565b6001600160e01b031981168114610b2d57600080fd5b600060208284031215611e9757600080fd5b813561102c81611e6f565b600060208284031215611eb457600080fd5b5035919050565b60005b83811015611ed6578181015183820152602001611ebe565b83811115611ee5576000848401525b50505050565b60008151808452611f03816020860160208601611ebb565b601f01601f19169290920160200192915050565b60208152600061102c6020830184611eeb565b600080600060608486031215611f3f57600080fd5b611f4884611e29565b95602085013595506040909401359392505050565b60008060408385031215611f7057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715611fbb57611fbb611f7f565b6040525050565b600067ffffffffffffffff821115611fdc57611fdc611f7f565b5060051b60200190565b600082601f830112611ff757600080fd5b8135602061200482611fc2565b6040516120118282611f95565b83815260059390931b850182019282810191508684111561203157600080fd5b8286015b8481101561204c5780358352918301918301612035565b509695505050505050565b600082601f83011261206857600080fd5b813567ffffffffffffffff81111561208257612082611f7f565b604051612099601f8301601f191660200182611f95565b8181528460208386010111156120ae57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156120e357600080fd5b6120ec86611e29565b94506120fa60208701611e29565b9350604086013567ffffffffffffffff8082111561211757600080fd5b61212389838a01611fe6565b9450606088013591508082111561213957600080fd5b61214589838a01611fe6565b9350608088013591508082111561215b57600080fd5b5061216888828901612057565b9150509295509295909350565b6000806040838503121561218857600080fd5b8235915061219860208401611e29565b90509250929050565b600080604083850312156121b457600080fd5b823567ffffffffffffffff808211156121cc57600080fd5b818501915085601f8301126121e057600080fd5b813560206121ed82611fc2565b6040516121fa8282611f95565b83815260059390931b850182019282810191508984111561221a57600080fd5b948201945b8386101561223f5761223086611e29565b8252948201949082019061221f565b9650508601359250508082111561225557600080fd5b5061069e85828601611fe6565b600081518084526020808501945080840160005b8381101561229257815187529582019590820190600101612276565b509495945050505050565b60208152600061102c6020830184612262565b600080604083850312156122c357600080fd5b6122cc83611e29565b9150602083013567ffffffffffffffff8111156122e857600080fd5b8301608081860312156122fa57600080fd5b809150509250929050565b6000806040838503121561231857600080fd5b61232183611e29565b9150602083013580151581146122fa57600080fd5b6000806040838503121561234957600080fd5b61235283611e29565b915061219860208401611e29565b600080600080600060a0868803121561237857600080fd5b61238186611e29565b945061238f60208701611e29565b93506040860135925060608601359150608086013567ffffffffffffffff8111156123b957600080fd5b61216888828901612057565b6000602082840312156123d757600080fd5b61102c82611e29565b600181811c908216806123f457607f821691505b60208210810361241457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561244a5761244a61241a565b500290565b60008261246c57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016124e8576124e861241a565b5060010190565b600082198211156125025761250261241a565b500190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006125a96040830185612262565b82810360208401526125bb8185612262565b95945050505050565b6000808335601e198436030181126125db57600080fd5b83018035915067ffffffffffffffff8211156125f657600080fd5b602001915036819003821315611a1c57600080fd5b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061264590830184611eeb565b979650505050505050565b60006020828403121561266257600080fd5b815161102c81611e6f565b600060033d1115611d005760046000803e5060005160e01c90565b600060443d10156126965790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156126c657505050505090565b82850191508151818111156126de5750505050505090565b843d87010160208285010111156126f85750505050505090565b61270760208286010187611f95565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061278690830186612262565b82810360608401526127988186612262565b905082810360808401526127ac8185611eeb565b98975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516127f0816017850160208801611ebb565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612821816028840160208801611ebb565b01602801949350505050565b60008161283c5761283c61241a565b506000190190565b634e487b7160e01b600052602160045260246000fdfea26469706673582212202967e360a828c4e2eac75872adabbb06e75444adb3577d6f4c4196eb1480022464736f6c634300080d0033a26469706673582212201cd388ad451c89d88832a8bb6e5e1cb9f8ce199e540193f88688ac6c129dd72d64736f6c634300080d0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200005e5760003560e01c80635c975abb1462000063578063715018a6146200008557806380aa201514620000915780638da5cb5b14620000c1578063f2fde38b14620000d3575b600080fd5b600054600160a01b900460ff1660405190151581526020015b60405180910390f35b6200008f620000ea565b005b620000a8620000a236600462000390565b62000102565b6040516001600160a01b0390911681526020016200007c565b6000546001600160a01b0316620000a8565b6200008f620000e43660046200044f565b620001ee565b620000f462000271565b620001006000620002cd565b565b60006200010e6200031d565b8282336040516200011f906200036c565b6200012d93929190620004d1565b604051809103906000f0801580156200014a573d6000803e3d6000fd5b5060405163f2fde38b60e01b81523360048201529091506001600160a01b0382169063f2fde38b90602401600060405180830381600087803b1580156200019057600080fd5b505af1158015620001a5573d6000803e3d6000fd5b505050507f51af02bd4bf0f605d8c1576d387be351956a5b12769a24b4a5b9b1cdacbc66f581338585604051620001e0949392919062000506565b60405180910390a192915050565b620001f862000271565b6001600160a01b038116620002635760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200026e81620002cd565b50565b6000546001600160a01b03163314620001005760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200025a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff1615620001005760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016200025a565b612dd8806200054683390190565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215620003a457600080fd5b823567ffffffffffffffff80821115620003bd57600080fd5b818501915085601f830112620003d257600080fd5b813581811115620003e757620003e76200037a565b604051601f8201601f19908116603f011681019083821181831017156200041257620004126200037a565b816040528281528860208487010111156200042c57600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b6000602082840312156200046257600080fd5b81356001600160a01b03811681146200047a57600080fd5b9392505050565b6000815180845260005b81811015620004a9576020818501810151868301820152016200048b565b81811115620004bc576000602083870101525b50601f01601f19169290920160200192915050565b606081526000620004e6606083018662000481565b6020830194909452506001600160a01b0391909116604090910152919050565b6001600160a01b03858116825284166020820152608060408201819052600090620005349083018562000481565b90508260608301529594505050505056fe6101406040523480156200001257600080fd5b5060405162002dd838038062002dd88339810160408190526200003591620003c1565b6040518060400160405280600c81526020016b2ab734b196ab37bab1b432b960a11b815250604051806040016040528060018152602001603160f81b8152508462000086816200016260201b60201c565b50815160209283012081519183019190912060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818801819052818301969096526060810194909452608080850193909352308483018190528151808603909301835260c0948501909152815191909501209052919091526101205262000121336200017b565b6200012d8183620001cd565b620001597f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6826200023b565b505050620004f8565b805162000177906002906020840190620002e8565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612710811115620001f15760405163c2b03beb60e01b815260040160405180910390fd5b604080518082019091526001600160a01b0390921680835262ffffff909116602090920182905260058054600160a01b9093026001600160b81b0319909316909117919091179055565b60008281526004602090815260408083206001600160a01b038516845290915290205462000177908390839060ff16620001775760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002a43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b828054620002f690620004bc565b90600052602060002090601f0160209004810192826200031a576000855562000365565b82601f106200033557805160ff191683800117855562000365565b8280016001018555821562000365579182015b828111156200036557825182559160200191906001019062000348565b506200037392915062000377565b5090565b5b8082111562000373576000815560010162000378565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620003bc57600080fd5b919050565b600080600060608486031215620003d757600080fd5b83516001600160401b0380821115620003ef57600080fd5b818601915086601f8301126200040457600080fd5b8151818111156200041957620004196200038e565b604051601f8201601f19908116603f011681019083821181831017156200044457620004446200038e565b816040528281526020935089848487010111156200046157600080fd5b600091505b8282101562000485578482018401518183018501529083019062000466565b82821115620004975760008484830101525b8097505050508086015193505050620004b360408501620003a4565b90509250925092565b600181811c90821680620004d157607f821691505b602082108103620004f257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051612890620005486000396000611c6301526000611cb201526000611c8d01526000611be601526000611c1001526000611c3a01526128906000f3fe60806040526004361061014a5760003560e01c8063715018a6116100b6578063d547741f1161006f578063d547741f146103eb578063e322ad2b1461040b578063e985e9c51461042d578063f242432a14610476578063f2fde38b14610496578063f5298aca146104b657600080fd5b8063715018a6146103255780638da5cb5b1461033a57806391d1485414610362578063a217fddf14610382578063a22cb46514610397578063d5391393146103b757600080fd5b80632eb2c2d6116101085780632eb2c2d6146102705780632f2ff15d1461029057806336568abe146102b05780633ccfd60b146102d05780634e1273f4146102e55780635acade481461031257600080fd5b8062fdd58e1461014f57806301ffc9a7146101825780630e89341c146101b2578063156e29f6146101df578063248a9ca3146102015780632a55205a14610231575b600080fd5b34801561015b57600080fd5b5061016f61016a366004611e45565b6104d6565b6040519081526020015b60405180910390f35b34801561018e57600080fd5b506101a261019d366004611e85565b61056c565b6040519015158152602001610179565b3480156101be57600080fd5b506101d26101cd366004611ea2565b610597565b6040516101799190611f17565b3480156101eb57600080fd5b506101ff6101fa366004611f2a565b61062b565b005b34801561020d57600080fd5b5061016f61021c366004611ea2565b60009081526004602052604090206001015490565b34801561023d57600080fd5b5061025161024c366004611f5d565b610653565b604080516001600160a01b039093168352602083019190915201610179565b34801561027c57600080fd5b506101ff61028b3660046120cb565b6106a8565b34801561029c57600080fd5b506101ff6102ab366004612175565b6106f4565b3480156102bc57600080fd5b506101ff6102cb366004612175565b610719565b3480156102dc57600080fd5b506101ff610797565b3480156102f157600080fd5b506103056103003660046121a1565b6107e2565b604051610179919061229d565b61016f6103203660046122b0565b61090c565b34801561033157600080fd5b506101ff610a03565b34801561034657600080fd5b506003546040516001600160a01b039091168152602001610179565b34801561036e57600080fd5b506101a261037d366004612175565b610a17565b34801561038e57600080fd5b5061016f600081565b3480156103a357600080fd5b506101ff6103b2366004612305565b610a42565b3480156103c357600080fd5b5061016f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156103f757600080fd5b506101ff610406366004612175565b610a4d565b34801561041757600080fd5b503360009081526006602052604090205461016f565b34801561043957600080fd5b506101a2610448366004612336565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561048257600080fd5b506101ff610491366004612360565b610a72565b3480156104a257600080fd5b506101ff6104b13660046123c5565b610ab7565b3480156104c257600080fd5b506101ff6104d1366004611f2a565b610b30565b60006001600160a01b0383166105465760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216631958019560e21b1480610591575061059182610b6c565b92915050565b6060600280546105a6906123e0565b80601f01602080910402602001604051908101604052809291908181526020018280546105d2906123e0565b801561061f5780601f106105f45761010080835404028352916020019161061f565b820191906000526020600020905b81548152906001019060200180831161060257829003601f168201915b50505050509050919050565b610633610b91565b61064e83838360405180602001604052806000815250610beb565b505050565b604080518082019091526005546001600160a01b038116808352600160a01b90910462ffffff16602083018190529091600091612710906106949086612430565b61069e919061244f565b9150509250929050565b6001600160a01b0385163314806106c457506106c48533610448565b6106e05760405162461bcd60e51b815260040161053d90612471565b6106ed8585858585610cff565b5050505050565b60008281526004602052604090206001015461070f81610edc565b61064e8383610ee6565b6001600160a01b03811633146107895760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161053d565b6107938282610f6c565b5050565b61079f610b91565b3360008181526006602052604080822080549083905590519091839183156108fc0291849190818181858888f1935050505015801561064e573d6000803e3d6000fd5b606081518351146108475760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161053d565b6000835167ffffffffffffffff81111561086357610863611f7f565b60405190808252806020026020018201604052801561088c578160200160208202803683370190505b50905060005b8451811015610904576108d78582815181106108b0576108b06124c0565b60200260200101518583815181106108ca576108ca6124c0565b60200260200101516104d6565b8282815181106108e9576108e96124c0565b60209081029190910101526108fd816124d6565b9050610892565b509392505050565b60008061091883610fd3565b90506109447f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a682610a17565b61096157604051638baa579f60e01b815260040160405180910390fd5b82602001353410156109865760405163356680b760e01b815260040160405180910390fd5b6109a9818460000135856040013560405180602001604052806000815250610beb565b6109cd81858560000135866040013560405180602001604052806000815250611033565b6001600160a01b038116600090815260066020526040812080543492906109f59084906124ef565b909155505091359392505050565b610a0b610b91565b610a15600061115d565b565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6107933383836111af565b600082815260046020526040902060010154610a6881610edc565b61064e8383610f6c565b6001600160a01b038516331480610a8e5750610a8e8533610448565b610aaa5760405162461bcd60e51b815260040161053d90612471565b6106ed8585858585611033565b610abf610b91565b6001600160a01b038116610b245760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161053d565b610b2d8161115d565b50565b610b38610b91565b336001600160a01b03841614610b61576040516330cd747160e01b815260040160405180910390fd5b61064e83838361128f565b60006001600160e01b03198216637965db0b60e01b148061059157506105918261140b565b6003546001600160a01b03163314610a155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161053d565b6001600160a01b038416610c4b5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161053d565b336000610c5785611430565b90506000610c6485611430565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290610c969084906124ef565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610cf68360008989898961147b565b50505050505050565b8151835114610d615760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161053d565b6001600160a01b038416610d875760405162461bcd60e51b815260040161053d90612507565b3360005b8451811015610e6e576000858281518110610da857610da86124c0565b602002602001015190506000858381518110610dc657610dc66124c0565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610e165760405162461bcd60e51b815260040161053d9061254c565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610e539084906124ef565b9250508190555050505080610e67906124d6565b9050610d8b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610ebe929190612596565b60405180910390a4610ed48187878787876115d6565b505050505050565b610b2d8133611691565b610ef08282610a17565b6107935760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610f283390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610f768282610a17565b156107935760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080610fdf836116f5565b905061102c81610ff260608601866125c4565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061175f92505050565b9392505050565b6001600160a01b0384166110595760405162461bcd60e51b815260040161053d90612507565b33600061106585611430565b9050600061107285611430565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156110b55760405162461bcd60e51b815260040161053d9061254c565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906110f29084906124ef565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611152848a8a8a8a8a61147b565b505050505050505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036112225760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161053d565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166112f15760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161053d565b3360006112fd84611430565b9050600061130a84611430565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156113935760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161053d565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052610cf6565b60006001600160e01b0319821663152a902d60e11b148061059157506105918261177b565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061146a5761146a6124c0565b602090810291909101015292915050565b6001600160a01b0384163b15610ed45760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906114bf908990899088908890889060040161260b565b6020604051808303816000875af19250505080156114fa575060408051601f3d908101601f191682019092526114f791810190612650565b60015b6115a65761150661266d565b806308c379a00361153f575061151a612688565b806115255750611541565b8060405162461bcd60e51b815260040161053d9190611f17565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161053d565b6001600160e01b0319811663f23a6e6160e01b14610cf65760405162461bcd60e51b815260040161053d90612712565b6001600160a01b0384163b15610ed45760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061161a908990899088908890889060040161275a565b6020604051808303816000875af1925050508015611655575060408051601f3d908101601f1916820190925261165291810190612650565b60015b6116615761150661266d565b6001600160e01b0319811663bc197c8160e01b14610cf65760405162461bcd60e51b815260040161053d90612712565b61169b8282610a17565b610793576116b3816001600160a01b031660146117cb565b6116be8360206117cb565b6040516020016116cf9291906127b8565b60408051601f198184030181529082905262461bcd60e51b825261053d91600401611f17565b604080517f273296f6b8425ecf436e74c1375a9a709300fa15a853da3f7c10240376f93de860208281019190915283358284015283013560608201529082013560808201526000906105919060a00160405160208183030381529060405280519060200120611967565b600080600061176e85856119b5565b9150915061090481611a23565b60006001600160e01b03198216636cdb3d1360e11b14806117ac57506001600160e01b031982166303a24d0760e21b145b8061059157506301ffc9a760e01b6001600160e01b0319831614610591565b606060006117da836002612430565b6117e59060026124ef565b67ffffffffffffffff8111156117fd576117fd611f7f565b6040519080825280601f01601f191660200182016040528015611827576020820181803683370190505b509050600360fc1b81600081518110611842576118426124c0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611871576118716124c0565b60200101906001600160f81b031916908160001a9053506000611895846002612430565b6118a09060016124ef565b90505b6001811115611918576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106118d4576118d46124c0565b1a60f81b8282815181106118ea576118ea6124c0565b60200101906001600160f81b031916908160001a90535060049490941c936119118161282d565b90506118a3565b50831561102c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161053d565b6000610591611974611bd9565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008082516041036119eb5760208301516040840151606085015160001a6119df87828585611d03565b94509450505050611a1c565b8251604003611a145760208301516040840151611a09868383611df0565b935093505050611a1c565b506000905060025b9250929050565b6000816004811115611a3757611a37612844565b03611a3f5750565b6001816004811115611a5357611a53612844565b03611aa05760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161053d565b6002816004811115611ab457611ab4612844565b03611b015760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161053d565b6003816004811115611b1557611b15612844565b03611b6d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161053d565b6004816004811115611b8157611b81612844565b03610b2d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161053d565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611c3257507f000000000000000000000000000000000000000000000000000000000000000046145b15611c5c57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b90565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611d3a5750600090506003611de7565b8460ff16601b14158015611d5257508460ff16601c14155b15611d635750600090506004611de7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611db7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611de057600060019250925050611de7565b9150600090505b94509492505050565b6000806001600160ff1b03831681611e0d60ff86901c601b6124ef565b9050611e1b87828885611d03565b935093505050935093915050565b80356001600160a01b0381168114611e4057600080fd5b919050565b60008060408385031215611e5857600080fd5b611e6183611e29565b946020939093013593505050565b6001600160e01b031981168114610b2d57600080fd5b600060208284031215611e9757600080fd5b813561102c81611e6f565b600060208284031215611eb457600080fd5b5035919050565b60005b83811015611ed6578181015183820152602001611ebe565b83811115611ee5576000848401525b50505050565b60008151808452611f03816020860160208601611ebb565b601f01601f19169290920160200192915050565b60208152600061102c6020830184611eeb565b600080600060608486031215611f3f57600080fd5b611f4884611e29565b95602085013595506040909401359392505050565b60008060408385031215611f7057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715611fbb57611fbb611f7f565b6040525050565b600067ffffffffffffffff821115611fdc57611fdc611f7f565b5060051b60200190565b600082601f830112611ff757600080fd5b8135602061200482611fc2565b6040516120118282611f95565b83815260059390931b850182019282810191508684111561203157600080fd5b8286015b8481101561204c5780358352918301918301612035565b509695505050505050565b600082601f83011261206857600080fd5b813567ffffffffffffffff81111561208257612082611f7f565b604051612099601f8301601f191660200182611f95565b8181528460208386010111156120ae57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156120e357600080fd5b6120ec86611e29565b94506120fa60208701611e29565b9350604086013567ffffffffffffffff8082111561211757600080fd5b61212389838a01611fe6565b9450606088013591508082111561213957600080fd5b61214589838a01611fe6565b9350608088013591508082111561215b57600080fd5b5061216888828901612057565b9150509295509295909350565b6000806040838503121561218857600080fd5b8235915061219860208401611e29565b90509250929050565b600080604083850312156121b457600080fd5b823567ffffffffffffffff808211156121cc57600080fd5b818501915085601f8301126121e057600080fd5b813560206121ed82611fc2565b6040516121fa8282611f95565b83815260059390931b850182019282810191508984111561221a57600080fd5b948201945b8386101561223f5761223086611e29565b8252948201949082019061221f565b9650508601359250508082111561225557600080fd5b5061069e85828601611fe6565b600081518084526020808501945080840160005b8381101561229257815187529582019590820190600101612276565b509495945050505050565b60208152600061102c6020830184612262565b600080604083850312156122c357600080fd5b6122cc83611e29565b9150602083013567ffffffffffffffff8111156122e857600080fd5b8301608081860312156122fa57600080fd5b809150509250929050565b6000806040838503121561231857600080fd5b61232183611e29565b9150602083013580151581146122fa57600080fd5b6000806040838503121561234957600080fd5b61235283611e29565b915061219860208401611e29565b600080600080600060a0868803121561237857600080fd5b61238186611e29565b945061238f60208701611e29565b93506040860135925060608601359150608086013567ffffffffffffffff8111156123b957600080fd5b61216888828901612057565b6000602082840312156123d757600080fd5b61102c82611e29565b600181811c908216806123f457607f821691505b60208210810361241457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561244a5761244a61241a565b500290565b60008261246c57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016124e8576124e861241a565b5060010190565b600082198211156125025761250261241a565b500190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006125a96040830185612262565b82810360208401526125bb8185612262565b95945050505050565b6000808335601e198436030181126125db57600080fd5b83018035915067ffffffffffffffff8211156125f657600080fd5b602001915036819003821315611a1c57600080fd5b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061264590830184611eeb565b979650505050505050565b60006020828403121561266257600080fd5b815161102c81611e6f565b600060033d1115611d005760046000803e5060005160e01c90565b600060443d10156126965790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156126c657505050505090565b82850191508151818111156126de5750505050505090565b843d87010160208285010111156126f85750505050505090565b61270760208286010187611f95565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061278690830186612262565b82810360608401526127988186612262565b905082810360808401526127ac8185611eeb565b98975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516127f0816017850160208801611ebb565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612821816028840160208801611ebb565b01602801949350505050565b60008161283c5761283c61241a565b506000190190565b634e487b7160e01b600052602160045260246000fdfea26469706673582212202967e360a828c4e2eac75872adabbb06e75444adb3577d6f4c4196eb1480022464736f6c634300080d0033a26469706673582212201cd388ad451c89d88832a8bb6e5e1cb9f8ce199e540193f88688ac6c129dd72d64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 400,
        "contract": "src/contracts/UnicFactory.sol:UnicFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 523,
        "contract": "src/contracts/UnicFactory.sol:UnicFactory",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}